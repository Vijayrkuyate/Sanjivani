using SanjivaniModalView;
using System;
using System.Collections.Generic;
using System.Drawing.Text;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Collections;
using System.Data;

namespace SanjivaniDataLinkLayer
{
    public interface InfPartner
    {
        int SaveChennelPartnerDetails(ChennelpartnerModel model, HttpPostedFileBase[] postedFile);
        int SaveCPCDetails(CPCchannelPartnerModel model, HttpPostedFileBase[] postedFile);
        int SaveDirectorBusinessDetails(DirectorBusinessModel model, HttpPostedFileBase[] postedFile);
        int UpdateCPCRegisterDetails(CPCchannelPartnerModel model, HttpPostedFileBase[] postedFile);
        List<State> GetBindState();
        List<CPCategory> GetBindCPCategory();
        List<CPCchannelPartnerModel> GetBindCPCustomer();
        List<CompanyType> GetBindCompanyType();
        List<ChennelpartnerModel> GetChennelPartnerList();
        List<CPCchannelPartnerModel> GetCPCChannelPartnerList();
        int SaveUploadChennelPartnerDocument(string filename1, int CustID, int type);
        int SaveUploadCPCDocument(string filename1, int CustID, int type);
        int SaveUploadDirectorDoc(string filename1, int CustID, int type);
        List<TypeOfHosting> getTypeofHosting();
        List<HostingPlatF> getHostingPlatform();
        ChennelpartnerModel getChannalPartnerDtl(int custId);
        bool rejectChannalPartner(int custId);
        DataSet getFolder();
       
        List<UserIntraction> getUserIntraction(int custId);
        bool SetUserIntarction(UserIntraction usD);
        DataTable getLoginDetail(string id);
        List<Account> getAccountType();
        List<BankName> GetBankName();

        List<PaymentType> getPaymentmode();
        bool setCPBusinessDtl(BusinessDetails bD);
        CPCchannelPartnerModel GetCPCChannelList(string custId);
       DirectorBusinessModel GetDirectorChannelEdit(string custId);
        List<DirectorBusinessModel> GetDirectorBusinessOwnerList();
        int UpdateDirectorBusinessRegister(DirectorBusinessModel model, HttpPostedFileBase[] postedFile);
        List<Bank>getBank();
        DirectorBusinessModel GetDirectorBusinessOwners(string CustId);
        int _PartialCPSave(ChennelpartnerModel model);
        int _SaveCPCPartialView(CPCchannelPartnerModel model);
        bool SetCPBankDtl(BankDetails bd);
        bool SetCPCBankDtl(BankDetails bd);
        bool SetDirectorBankDtl(BankDetails bd);
        DataTable checkUserIdExists(string userId);
        DataTable checkEmailExists(string email);
        ChennelpartnerModel getCPForEdit(int custid);
        BusinessDetails _partialgetCPBusinessDtl(string custId);
        CountryState getCountryStateForCPPersonal(int custId);
        BankDetails _partialgetCPBankDtl(string custId);
        bool deleteCp(int custId);
        bool DeleteUserIntraction(int IntractionId);
        List<Documents1> GetCPDocument(int custId);
        List<Documents1>getDirectorDocument(int custId);
        bool approveCP(int custId);
        Dashboard getDirectorDashboard();
        List<GHDs> GetGHDList();
        bool SetGHD(GHDs gHD);
        List<OrgChart> GetcpOrg();
        List<OrgChart> GetcpcOrg();
        List<OrgChart> GetCustomerOrg();
        List<OrgChart> GetDirectorOrg();
        List<OrgChart> GetAffilatorOrg();
        bool deleteGHD(int GHDId);
        List<VOCust> getVOC();
        bool DeleteVOC(int VocDtlId);
        bool setVOC(VOCust vc);
        List<GlobalHelpdesk> getGlobaldeskImgs(int GID);
        int SaveGlobalHelDskQue(GlobalHelpdesk model, HttpPostedFileBase[] postedFile);
        bool deleteGlobalImg(int GID);
        List<GHDTicket> getGHDTicket();
        List<CPStorefront> getCPBanner(string custName);
        bool setCPBanner(string cPName, string filename1);
        List<CPStorefront> getCPClient(string name);
        bool setCPClient(string cPName, string filename1);
        List<CPStorefront> getCPLoginPage(string custName);
        bool setCPLoginPage(string cPName, string filename1);
        List<CPPeopleTalks> getCPPeopleTalks(string custName);
        bool setCPPeopleTalk(string cPName, string popleTalk, string filename1);
        List<Reveneue> getDirectorReveneue();
        List<ProductCount> getProductCountForDirectorDash();
        bool deleteDirector(int custId);
        List<CPCchannelPartnerModel> getCustomerList();
        List<TicketTypes> getTicketType();
        TicketCount getTicketCount(string TicketTypeId);
        List<GHDTicket> getOpenTicketCount(string ticketTypeId);
        GHDView getSalesGHDTicket(int ticketId);
        GHDView getTechanicalGHDTicket(int ticketId);
        DataTable getDNSSettingForTechanical(int customerDomainProductDnsMIdv);
        bool UpdateTicketStatus(string type, string ticketId);
        List<MailBox> getDirectorMailBox();
        int Sendmail(string msg, string email,int CustId);
        List<MailBox> getSentMailBox(int custId);
        List<Orgchart> _OrgChartNew(string cPName);
        List<CPStorefront> getCompanyLogo(string name);
        bool setCompanyLogo(string cPName, string filename1);
        List<CustomerAggrements> getCustomerAggre();
        bool setCustomerAggrement(CustomerAggrements cA);
        bool deleteCustomerAggrem(int custAggrementId);
        List<CPAggrements> getCPAggre();
        bool setCPAggrement(CPAggrements cA);
        bool deleteCPAggrem(int cPAggrementId);
        List<Privacys> getPrivacy();
        bool setPrivacy(Privacys cA);
        bool deletePrivacy(int privacyId);
        List<ProductAggrements> getProductAggrement();
        bool setProductAggrement(ProductAggrements cA);
        bool DeleteProductAggrement(int productAggrementId);
        List<Employees> getEmpList();
        List<EmpRoles> getEmpRole();
        Employees getEmpForEdit(int custId);
        int _PartialEmpSave(Employees model);
        bool deleteEmp(int custId);
        DataTable getEmpCalender(string date);
        DataTable getEmpAttendance(string custName, string date);
        bool setEmpAttendance(EmpAttendance cA);
    }
}
